Args { file: "main.shd", output: "main.asm", debug: true, code_context: true, level: Warn, verbs: [], } LEXER Token(DecimalIntLiteral, main.shd:1(0,1), "1") Token(Plus, main.shd:1(2,3), "+") Token(DecimalIntLiteral, main.shd:1(4,5), "2") Token(Star, main.shd:1(6,7), "*") Token(DecimalIntLiteral, main.shd:1(8,9), "3") Token(Plus, main.shd:1(10,11), "+") Token(DecimalIntLiteral, main.shd:1(12,13), "3") Token(Percent, main.shd:1(14,15), "%") Token(DecimalIntLiteral, main.shd:1(16,17), "3") Token(NewLine, main.shd:2(17,17)) Token(EOF, main.shd:2(18,18)) MACRO-DEFS: PREPROCESSOR Token(DecimalIntLiteral, main.shd:1(0,1), "1") Token(Plus, main.shd:1(2,3), "+") Token(DecimalIntLiteral, main.shd:1(4,5), "2") Token(Star, main.shd:1(6,7), "*") Token(DecimalIntLiteral, main.shd:1(8,9), "3") Token(Plus, main.shd:1(10,11), "+") Token(DecimalIntLiteral, main.shd:1(12,13), "3") Token(Percent, main.shd:1(14,15), "%") Token(DecimalIntLiteral, main.shd:1(16,17), "3") Token(NewLine, main.shd:2(17,17)) Token(EOF, main.shd:2(18,18)) PARSER (BinaryExpr (BinaryExpr (IntegerLiteral: 1) Plus (BinaryExpr (IntegerLiteral: 2) Star (IntegerLiteral: 3))) Plus (BinaryExpr (IntegerLiteral: 3) Percent (IntegerLiteral: 3))) -n PARSER
