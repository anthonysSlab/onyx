/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") { 7 - (index % 8) } else { index % 8 };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") { 7 - (index % 8) } else { index % 8 };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index =
                    if cfg!(target_endian = "big") { bit_width as usize - 1 - i } else { i };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") { bit_width as usize - 1 - i } else { i };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _BSD_SOURCE: u32 = 1;
pub const _XOPEN_SOURCE: u32 = 700;
pub const __BYTE_ORDER: u32 = 1234;
pub const __LONG_MAX: u64 = 9223372036854775807;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __USE_TIME_BITS64: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST64_MAX: i32 = -1;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const __PRI64: &[u8; 2] = b"l\0";
pub const __PRIPTR: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 2] = b"d\0";
pub const PRIdFAST32: &[u8; 2] = b"d\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 2] = b"i\0";
pub const PRIiFAST32: &[u8; 2] = b"i\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 2] = b"o\0";
pub const PRIoFAST32: &[u8; 2] = b"o\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 2] = b"u\0";
pub const PRIuFAST32: &[u8; 2] = b"u\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 2] = b"x\0";
pub const PRIxFAST32: &[u8; 2] = b"x\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 2] = b"X\0";
pub const PRIXFAST32: &[u8; 2] = b"X\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 2] = b"d\0";
pub const SCNdFAST32: &[u8; 2] = b"d\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 2] = b"i\0";
pub const SCNiFAST32: &[u8; 2] = b"i\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 2] = b"u\0";
pub const SCNuFAST32: &[u8; 2] = b"u\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 2] = b"o\0";
pub const SCNoFAST32: &[u8; 2] = b"o\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 2] = b"x\0";
pub const SCNxFAST32: &[u8; 2] = b"x\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const ULONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const ULLONG_MAX: i32 = -1;
pub const MB_LEN_MAX: u32 = 4;
pub const PAGESIZE: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const FILESIZEBITS: u32 = 64;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const NGROUPS_MAX: u32 = 32;
pub const ARG_MAX: u32 = 131072;
pub const IOV_MAX: u32 = 1024;
pub const SYMLOOP_MAX: u32 = 40;
pub const WORD_BIT: u32 = 32;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const TZNAME_MAX: u32 = 6;
pub const TTY_NAME_MAX: u32 = 32;
pub const HOST_NAME_MAX: u32 = 255;
pub const LONG_BIT: u32 = 64;
pub const PTHREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_STACK_MIN: u32 = 2048;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const SEM_NSEMS_MAX: u32 = 256;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 4096;
pub const RE_DUP_MAX: u32 = 255;
pub const NL_ARGMAX: u32 = 9;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const PAGE_SIZE: u32 = 4096;
pub const NZERO: u32 = 20;
pub const NL_LANGMAX: u32 = 32;
pub const NL_NMAX: u32 = 16;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const FILENAME_MAX: u32 = 4096;
pub const FOPEN_MAX: u32 = 1000;
pub const TMP_MAX: u32 = 10000;
pub const L_tmpnam: u32 = 20;
pub const L_ctermid: u32 = 20;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_cuserid: u32 = 20;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
extern "C" {
    pub fn __assert_fail(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    );
}
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = i8;
pub type int_fast64_t = i64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast64_t = u64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast16_t = i32;
pub type int_fast32_t = i32;
pub type uint_fast16_t = u32;
pub type uint_fast32_t = u32;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(imaxdiv_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(imaxdiv_t), "::", stringify!(rem))
    );
}
extern "C" {
    pub fn imaxabs(arg1: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(arg1: intmax_t, arg2: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        arg1: *const wchar_t,
        arg2: *mut *mut wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type off_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    _unused: [u8; 0],
}
pub type FILE = _IO_FILE;
pub type va_list = __builtin_va_list;
pub type __isoc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _G_fpos64_t {
    pub __opaque: [::std::os::raw::c_char; 16usize],
    pub __lldata: ::std::os::raw::c_longlong,
    pub __align: f64,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_G_fpos64_t), "::", stringify!(__opaque))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lldata) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_G_fpos64_t), "::", stringify!(__lldata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_G_fpos64_t), "::", stringify!(__align))
    );
}
pub type fpos_t = _G_fpos64_t;
extern "C" {
    pub static stdin: *mut FILE;
}
extern "C" {
    pub static stdout: *mut FILE;
}
extern "C" {
    pub static stderr: *mut FILE;
}
extern "C" {
    pub fn fopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(arg1: *mut *mut ::std::os::raw::c_char, arg2: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko(
        arg1: *mut FILE,
        arg2: off_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(arg1: *mut FILE) -> off_t;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut usize,
        arg3: ::std::os::raw::c_int,
        arg4: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut usize,
        arg3: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cuserid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE);
}
extern "C" {
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char, arg3: usize);
}
extern "C" {
    pub fn fgetc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: usize,
        arg4: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: usize,
        arg4: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn clearerr_unlocked(arg1: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn malloc(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn aligned_alloc(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn quick_exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: usize,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: usize,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<div_t>(), 8usize, concat!("Size of: ", stringify!(div_t)));
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(div_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(div_t), "::", stringify!(rem))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<ldiv_t>(), 16usize, concat!("Size of: ", stringify!(ldiv_t)));
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ldiv_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ldiv_t), "::", stringify!(rem))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(lldiv_t), "::", stringify!(quot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(lldiv_t), "::", stringify!(rem))
    );
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(arg1: *const ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn posix_memalign(
        arg1: *mut *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memalign(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reallocarray(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_r(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: usize,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg5: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    _unused: [u8; 0],
}
pub type locale_t = *mut __locale_struct;
extern "C" {
    pub fn memcpy(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strchr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtok_r(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stpcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(arg1: *const ::std::os::raw::c_char, arg2: usize) -> usize;
}
extern "C" {
    pub fn strdup(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn memmem(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strsep(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn explicit_bzero(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
pub type uchar = ::std::os::raw::c_uchar;
pub type uint = ::std::os::raw::c_uint;
pub type ulong = ::std::os::raw::c_ulong;
pub type bits = ::std::os::raw::c_ulonglong;
pub type Mem = Addr;
pub const NString: _bindgen_ty_1 = 80;
pub const NIns: _bindgen_ty_1 = 1048576;
pub const NAlign: _bindgen_ty_1 = 3;
pub const NField: _bindgen_ty_1 = 32;
pub const NBit: _bindgen_ty_1 = 64;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Target {
    pub name: [::std::os::raw::c_char; 16usize],
    pub apple: ::std::os::raw::c_char,
    pub gpr0: ::std::os::raw::c_int,
    pub ngpr: ::std::os::raw::c_int,
    pub fpr0: ::std::os::raw::c_int,
    pub nfpr: ::std::os::raw::c_int,
    pub rglob: bits,
    pub nrglob: ::std::os::raw::c_int,
    pub rsave: *mut ::std::os::raw::c_int,
    pub nrsave: [::std::os::raw::c_int; 2usize],
    pub retregs: ::std::option::Option<
        unsafe extern "C" fn(arg1: Ref, arg2: *mut ::std::os::raw::c_int) -> bits,
    >,
    pub argregs: ::std::option::Option<
        unsafe extern "C" fn(arg1: Ref, arg2: *mut ::std::os::raw::c_int) -> bits,
    >,
    pub memargs: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub abi0: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Fn)>,
    pub abi1: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Fn)>,
    pub isel: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Fn)>,
    pub emitfn: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Fn, arg2: *mut FILE)>,
    pub emitfin: ::std::option::Option<unsafe extern "C" fn(arg1: *mut FILE)>,
    pub asloc: [::std::os::raw::c_char; 4usize],
    pub assym: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_Target() {
    const UNINIT: ::std::mem::MaybeUninit<Target> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Target>(), 144usize, concat!("Size of: ", stringify!(Target)));
    assert_eq!(
        ::std::mem::align_of::<Target>(),
        8usize,
        concat!("Alignment of ", stringify!(Target))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apple) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(apple))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gpr0) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(gpr0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ngpr) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(ngpr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fpr0) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(fpr0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nfpr) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(nfpr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rglob) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(rglob))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nrglob) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(nrglob))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rsave) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(rsave))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nrsave) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(nrsave))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retregs) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(retregs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argregs) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(argregs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memargs) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(memargs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abi0) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(abi0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abi1) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(abi1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isel) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(isel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).emitfn) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(emitfn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).emitfin) as usize - ptr as usize },
        128usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(emitfin))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asloc) as usize - ptr as usize },
        136usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(asloc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).assym) as usize - ptr as usize },
        140usize,
        concat!("Offset of field: ", stringify!(Target), "::", stringify!(assym))
    );
}
pub const RXX: _bindgen_ty_2 = 0;
pub const Tmp0: _bindgen_ty_2 = 64;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BSet {
    pub nt: uint,
    pub t: *mut bits,
}
#[test]
fn bindgen_test_layout_BSet() {
    const UNINIT: ::std::mem::MaybeUninit<BSet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<BSet>(), 16usize, concat!("Size of: ", stringify!(BSet)));
    assert_eq!(::std::mem::align_of::<BSet>(), 8usize, concat!("Alignment of ", stringify!(BSet)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nt) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(BSet), "::", stringify!(nt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(BSet), "::", stringify!(t))
    );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Ref {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_Ref() {
    assert_eq!(::std::mem::size_of::<Ref>(), 4usize, concat!("Size of: ", stringify!(Ref)));
    assert_eq!(::std::mem::align_of::<Ref>(), 4usize, concat!("Alignment of ", stringify!(Ref)));
}
impl Ref {
    #[inline]
    pub fn type_(&self) -> uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn val(&self) -> uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_val(&mut self, val: uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(type_: uint, val: uint) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let val: u32 = unsafe { ::std::mem::transmute(val) };
            val as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const RTmp: _bindgen_ty_3 = 0;
pub const RCon: _bindgen_ty_3 = 1;
pub const RInt: _bindgen_ty_3 = 2;
pub const RType: _bindgen_ty_3 = 3;
pub const RSlot: _bindgen_ty_3 = 4;
pub const RCall: _bindgen_ty_3 = 5;
pub const RMem: _bindgen_ty_3 = 6;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const CmpI_Cieq: CmpI = 0;
pub const CmpI_Cine: CmpI = 1;
pub const CmpI_Cisge: CmpI = 2;
pub const CmpI_Cisgt: CmpI = 3;
pub const CmpI_Cisle: CmpI = 4;
pub const CmpI_Cislt: CmpI = 5;
pub const CmpI_Ciuge: CmpI = 6;
pub const CmpI_Ciugt: CmpI = 7;
pub const CmpI_Ciule: CmpI = 8;
pub const CmpI_Ciult: CmpI = 9;
pub const CmpI_NCmpI: CmpI = 10;
pub type CmpI = ::std::os::raw::c_uint;
pub const CmpF_Cfeq: CmpF = 0;
pub const CmpF_Cfge: CmpF = 1;
pub const CmpF_Cfgt: CmpF = 2;
pub const CmpF_Cfle: CmpF = 3;
pub const CmpF_Cflt: CmpF = 4;
pub const CmpF_Cfne: CmpF = 5;
pub const CmpF_Cfo: CmpF = 6;
pub const CmpF_Cfuo: CmpF = 7;
pub const CmpF_NCmpF: CmpF = 8;
pub const CmpF_NCmp: CmpF = 18;
pub type CmpF = ::std::os::raw::c_uint;
pub const O_Oxxx: O = 0;
pub const O_Oadd: O = 1;
pub const O_Osub: O = 2;
pub const O_Oneg: O = 3;
pub const O_Odiv: O = 4;
pub const O_Orem: O = 5;
pub const O_Oudiv: O = 6;
pub const O_Ourem: O = 7;
pub const O_Omul: O = 8;
pub const O_Oand: O = 9;
pub const O_Oor: O = 10;
pub const O_Oxor: O = 11;
pub const O_Osar: O = 12;
pub const O_Oshr: O = 13;
pub const O_Oshl: O = 14;
pub const O_Oceqw: O = 15;
pub const O_Ocnew: O = 16;
pub const O_Ocsgew: O = 17;
pub const O_Ocsgtw: O = 18;
pub const O_Ocslew: O = 19;
pub const O_Ocsltw: O = 20;
pub const O_Ocugew: O = 21;
pub const O_Ocugtw: O = 22;
pub const O_Oculew: O = 23;
pub const O_Ocultw: O = 24;
pub const O_Oceql: O = 25;
pub const O_Ocnel: O = 26;
pub const O_Ocsgel: O = 27;
pub const O_Ocsgtl: O = 28;
pub const O_Ocslel: O = 29;
pub const O_Ocsltl: O = 30;
pub const O_Ocugel: O = 31;
pub const O_Ocugtl: O = 32;
pub const O_Oculel: O = 33;
pub const O_Ocultl: O = 34;
pub const O_Oceqs: O = 35;
pub const O_Ocges: O = 36;
pub const O_Ocgts: O = 37;
pub const O_Ocles: O = 38;
pub const O_Oclts: O = 39;
pub const O_Ocnes: O = 40;
pub const O_Ocos: O = 41;
pub const O_Ocuos: O = 42;
pub const O_Oceqd: O = 43;
pub const O_Ocged: O = 44;
pub const O_Ocgtd: O = 45;
pub const O_Ocled: O = 46;
pub const O_Ocltd: O = 47;
pub const O_Ocned: O = 48;
pub const O_Ocod: O = 49;
pub const O_Ocuod: O = 50;
pub const O_Ostoreb: O = 51;
pub const O_Ostoreh: O = 52;
pub const O_Ostorew: O = 53;
pub const O_Ostorel: O = 54;
pub const O_Ostores: O = 55;
pub const O_Ostored: O = 56;
pub const O_Oloadsb: O = 57;
pub const O_Oloadub: O = 58;
pub const O_Oloadsh: O = 59;
pub const O_Oloaduh: O = 60;
pub const O_Oloadsw: O = 61;
pub const O_Oloaduw: O = 62;
pub const O_Oload: O = 63;
pub const O_Oextsb: O = 64;
pub const O_Oextub: O = 65;
pub const O_Oextsh: O = 66;
pub const O_Oextuh: O = 67;
pub const O_Oextsw: O = 68;
pub const O_Oextuw: O = 69;
pub const O_Oexts: O = 70;
pub const O_Otruncd: O = 71;
pub const O_Ostosi: O = 72;
pub const O_Ostoui: O = 73;
pub const O_Odtosi: O = 74;
pub const O_Odtoui: O = 75;
pub const O_Oswtof: O = 76;
pub const O_Ouwtof: O = 77;
pub const O_Osltof: O = 78;
pub const O_Oultof: O = 79;
pub const O_Ocast: O = 80;
pub const O_Oalloc4: O = 81;
pub const O_Oalloc8: O = 82;
pub const O_Oalloc16: O = 83;
pub const O_Ovaarg: O = 84;
pub const O_Ovastart: O = 85;
pub const O_Ocopy: O = 86;
pub const O_Odbgloc: O = 87;
pub const O_Onop: O = 88;
pub const O_Oaddr: O = 89;
pub const O_Oblit0: O = 90;
pub const O_Oblit1: O = 91;
pub const O_Oswap: O = 92;
pub const O_Osign: O = 93;
pub const O_Osalloc: O = 94;
pub const O_Oxidiv: O = 95;
pub const O_Oxdiv: O = 96;
pub const O_Oxcmp: O = 97;
pub const O_Oxtest: O = 98;
pub const O_Oacmp: O = 99;
pub const O_Oacmn: O = 100;
pub const O_Oafcmp: O = 101;
pub const O_Oreqz: O = 102;
pub const O_Ornez: O = 103;
pub const O_Opar: O = 104;
pub const O_Oparsb: O = 105;
pub const O_Oparub: O = 106;
pub const O_Oparsh: O = 107;
pub const O_Oparuh: O = 108;
pub const O_Oparc: O = 109;
pub const O_Opare: O = 110;
pub const O_Oarg: O = 111;
pub const O_Oargsb: O = 112;
pub const O_Oargub: O = 113;
pub const O_Oargsh: O = 114;
pub const O_Oarguh: O = 115;
pub const O_Oargc: O = 116;
pub const O_Oarge: O = 117;
pub const O_Oargv: O = 118;
pub const O_Ocall: O = 119;
pub const O_Oflagieq: O = 120;
pub const O_Oflagine: O = 121;
pub const O_Oflagisge: O = 122;
pub const O_Oflagisgt: O = 123;
pub const O_Oflagisle: O = 124;
pub const O_Oflagislt: O = 125;
pub const O_Oflagiuge: O = 126;
pub const O_Oflagiugt: O = 127;
pub const O_Oflagiule: O = 128;
pub const O_Oflagiult: O = 129;
pub const O_Oflagfeq: O = 130;
pub const O_Oflagfge: O = 131;
pub const O_Oflagfgt: O = 132;
pub const O_Oflagfle: O = 133;
pub const O_Oflagflt: O = 134;
pub const O_Oflagfne: O = 135;
pub const O_Oflagfo: O = 136;
pub const O_Oflagfuo: O = 137;
pub const O_NOp: O = 138;
pub type O = ::std::os::raw::c_uint;
pub const J_Jxxx: J = 0;
pub const J_Jretw: J = 1;
pub const J_Jretl: J = 2;
pub const J_Jrets: J = 3;
pub const J_Jretd: J = 4;
pub const J_Jretsb: J = 5;
pub const J_Jretub: J = 6;
pub const J_Jretsh: J = 7;
pub const J_Jretuh: J = 8;
pub const J_Jretc: J = 9;
pub const J_Jret0: J = 10;
pub const J_Jjmp: J = 11;
pub const J_Jjnz: J = 12;
pub const J_Jjfieq: J = 13;
pub const J_Jjfine: J = 14;
pub const J_Jjfisge: J = 15;
pub const J_Jjfisgt: J = 16;
pub const J_Jjfisle: J = 17;
pub const J_Jjfislt: J = 18;
pub const J_Jjfiuge: J = 19;
pub const J_Jjfiugt: J = 20;
pub const J_Jjfiule: J = 21;
pub const J_Jjfiult: J = 22;
pub const J_Jjffeq: J = 23;
pub const J_Jjffge: J = 24;
pub const J_Jjffgt: J = 25;
pub const J_Jjffle: J = 26;
pub const J_Jjfflt: J = 27;
pub const J_Jjffne: J = 28;
pub const J_Jjffo: J = 29;
pub const J_Jjffuo: J = 30;
pub const J_Jhlt: J = 31;
pub const J_NJmp: J = 32;
pub type J = ::std::os::raw::c_uint;
pub const Ocmpw: _bindgen_ty_4 = 15;
pub const Ocmpw1: _bindgen_ty_4 = 24;
pub const Ocmpl: _bindgen_ty_4 = 25;
pub const Ocmpl1: _bindgen_ty_4 = 34;
pub const Ocmps: _bindgen_ty_4 = 35;
pub const Ocmps1: _bindgen_ty_4 = 42;
pub const Ocmpd: _bindgen_ty_4 = 43;
pub const Ocmpd1: _bindgen_ty_4 = 50;
pub const Oalloc: _bindgen_ty_4 = 81;
pub const Oalloc1: _bindgen_ty_4 = 83;
pub const Oflag: _bindgen_ty_4 = 120;
pub const Oflag1: _bindgen_ty_4 = 137;
pub const NPubOp: _bindgen_ty_4 = 88;
pub const Jjf: _bindgen_ty_4 = 13;
pub const Jjf1: _bindgen_ty_4 = 30;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const Kx: _bindgen_ty_5 = -1;
pub const Kw: _bindgen_ty_5 = 0;
pub const Kl: _bindgen_ty_5 = 1;
pub const Ks: _bindgen_ty_5 = 2;
pub const Kd: _bindgen_ty_5 = 3;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Op {
    pub name: *mut ::std::os::raw::c_char,
    pub argcls: [[::std::os::raw::c_short; 4usize]; 2usize],
    pub canfold: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Op() {
    const UNINIT: ::std::mem::MaybeUninit<Op> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Op>(), 32usize, concat!("Size of: ", stringify!(Op)));
    assert_eq!(::std::mem::align_of::<Op>(), 8usize, concat!("Alignment of ", stringify!(Op)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Op), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argcls) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Op), "::", stringify!(argcls))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canfold) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(Op), "::", stringify!(canfold))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Ins {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub to: Ref,
    pub arg: [Ref; 2usize],
}
#[test]
fn bindgen_test_layout_Ins() {
    const UNINIT: ::std::mem::MaybeUninit<Ins> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Ins>(), 16usize, concat!("Size of: ", stringify!(Ins)));
    assert_eq!(::std::mem::align_of::<Ins>(), 4usize, concat!("Alignment of ", stringify!(Ins)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Ins), "::", stringify!(to))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Ins), "::", stringify!(arg))
    );
}
impl Ins {
    #[inline]
    pub fn op(&self) -> uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_op(&mut self, val: uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn cls(&self) -> uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_cls(&mut self, val: uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(op: uint, cls: uint) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 30u8, {
            let op: u32 = unsafe { ::std::mem::transmute(op) };
            op as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let cls: u32 = unsafe { ::std::mem::transmute(cls) };
            cls as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Phi {
    pub to: Ref,
    pub arg: *mut Ref,
    pub blk: *mut *mut Blk,
    pub narg: uint,
    pub cls: ::std::os::raw::c_int,
    pub link: *mut Phi,
}
#[test]
fn bindgen_test_layout_Phi() {
    const UNINIT: ::std::mem::MaybeUninit<Phi> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Phi>(), 40usize, concat!("Size of: ", stringify!(Phi)));
    assert_eq!(::std::mem::align_of::<Phi>(), 8usize, concat!("Alignment of ", stringify!(Phi)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Phi), "::", stringify!(to))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Phi), "::", stringify!(arg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blk) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(Phi), "::", stringify!(blk))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).narg) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(Phi), "::", stringify!(narg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cls) as usize - ptr as usize },
        28usize,
        concat!("Offset of field: ", stringify!(Phi), "::", stringify!(cls))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(Phi), "::", stringify!(link))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Blk {
    pub phi: *mut Phi,
    pub ins: *mut Ins,
    pub nins: uint,
    pub jmp: Blk__bindgen_ty_1,
    pub s1: *mut Blk,
    pub s2: *mut Blk,
    pub link: *mut Blk,
    pub id: uint,
    pub visit: uint,
    pub idom: *mut Blk,
    pub dom: *mut Blk,
    pub dlink: *mut Blk,
    pub fron: *mut *mut Blk,
    pub nfron: uint,
    pub pred: *mut *mut Blk,
    pub npred: uint,
    pub in_: [BSet; 1usize],
    pub out: [BSet; 1usize],
    pub gen: [BSet; 1usize],
    pub nlive: [::std::os::raw::c_int; 2usize],
    pub loop_: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 80usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Blk__bindgen_ty_1 {
    pub type_: ::std::os::raw::c_short,
    pub arg: Ref,
}
#[test]
fn bindgen_test_layout_Blk__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Blk__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Blk__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Blk__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Blk__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Blk__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Blk__bindgen_ty_1), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Blk__bindgen_ty_1), "::", stringify!(arg))
    );
}
#[test]
fn bindgen_test_layout_Blk() {
    const UNINIT: ::std::mem::MaybeUninit<Blk> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Blk>(), 264usize, concat!("Size of: ", stringify!(Blk)));
    assert_eq!(::std::mem::align_of::<Blk>(), 8usize, concat!("Alignment of ", stringify!(Blk)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phi) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(phi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(ins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nins) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(nins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jmp) as usize - ptr as usize },
        20usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(jmp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(s1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(s2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(link))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visit) as usize - ptr as usize },
        60usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(visit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idom) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(idom))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dom) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(dom))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dlink) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(dlink))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fron) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(fron))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nfron) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(nfron))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pred) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(pred))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).npred) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(npred))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(in_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        136usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gen) as usize - ptr as usize },
        152usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(gen))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nlive) as usize - ptr as usize },
        168usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(nlive))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loop_) as usize - ptr as usize },
        176usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(loop_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        180usize,
        concat!("Offset of field: ", stringify!(Blk), "::", stringify!(name))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Use {
    pub type_: Use__bindgen_ty_1,
    pub bid: uint,
    pub u: Use__bindgen_ty_2,
}
pub const Use_UXXX: Use__bindgen_ty_1 = 0;
pub const Use_UPhi: Use__bindgen_ty_1 = 1;
pub const Use_UIns: Use__bindgen_ty_1 = 2;
pub const Use_UJmp: Use__bindgen_ty_1 = 3;
pub type Use__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union Use__bindgen_ty_2 {
    pub ins: *mut Ins,
    pub phi: *mut Phi,
}
#[test]
fn bindgen_test_layout_Use__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<Use__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Use__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(Use__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Use__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(Use__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ins) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Use__bindgen_ty_2), "::", stringify!(ins))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phi) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Use__bindgen_ty_2), "::", stringify!(phi))
    );
}
#[test]
fn bindgen_test_layout_Use() {
    const UNINIT: ::std::mem::MaybeUninit<Use> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Use>(), 16usize, concat!("Size of: ", stringify!(Use)));
    assert_eq!(::std::mem::align_of::<Use>(), 8usize, concat!("Alignment of ", stringify!(Use)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Use), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bid) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Use), "::", stringify!(bid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Use), "::", stringify!(u))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sym {
    pub type_: Sym__bindgen_ty_1,
    pub id: u32,
}
pub const Sym_SGlo: Sym__bindgen_ty_1 = 0;
pub const Sym_SThr: Sym__bindgen_ty_1 = 1;
pub type Sym__bindgen_ty_1 = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_Sym() {
    const UNINIT: ::std::mem::MaybeUninit<Sym> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Sym>(), 8usize, concat!("Size of: ", stringify!(Sym)));
    assert_eq!(::std::mem::align_of::<Sym>(), 4usize, concat!("Alignment of ", stringify!(Sym)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Sym), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Sym), "::", stringify!(id))
    );
}
pub const NoAlias: _bindgen_ty_6 = 0;
pub const MayAlias: _bindgen_ty_6 = 1;
pub const MustAlias: _bindgen_ty_6 = 2;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Alias {
    pub type_: Alias__bindgen_ty_1,
    pub base: ::std::os::raw::c_int,
    pub offset: i64,
    pub u: Alias__bindgen_ty_2,
    pub slot: *mut Alias,
}
pub const Alias_ABot: Alias__bindgen_ty_1 = 0;
pub const Alias_ALoc: Alias__bindgen_ty_1 = 1;
pub const Alias_ACon: Alias__bindgen_ty_1 = 2;
pub const Alias_AEsc: Alias__bindgen_ty_1 = 3;
pub const Alias_ASym: Alias__bindgen_ty_1 = 4;
pub const Alias_AUnk: Alias__bindgen_ty_1 = 6;
pub type Alias__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union Alias__bindgen_ty_2 {
    pub sym: Sym,
    pub loc: Alias__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Alias__bindgen_ty_2__bindgen_ty_1 {
    pub sz: ::std::os::raw::c_int,
    pub m: bits,
}
#[test]
fn bindgen_test_layout_Alias__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Alias__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Alias__bindgen_ty_2__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(Alias__bindgen_ty_2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Alias__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Alias__bindgen_ty_2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sz) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Alias__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Alias__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(m)
        )
    );
}
#[test]
fn bindgen_test_layout_Alias__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<Alias__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Alias__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(Alias__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Alias__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(Alias__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sym) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Alias__bindgen_ty_2), "::", stringify!(sym))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loc) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Alias__bindgen_ty_2), "::", stringify!(loc))
    );
}
#[test]
fn bindgen_test_layout_Alias() {
    const UNINIT: ::std::mem::MaybeUninit<Alias> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Alias>(), 40usize, concat!("Size of: ", stringify!(Alias)));
    assert_eq!(
        ::std::mem::align_of::<Alias>(),
        8usize,
        concat!("Alignment of ", stringify!(Alias))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Alias), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Alias), "::", stringify!(base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Alias), "::", stringify!(offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(Alias), "::", stringify!(u))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(Alias), "::", stringify!(slot))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Tmp {
    pub name: [::std::os::raw::c_char; 80usize],
    pub def: *mut Ins,
    pub use_: *mut Use,
    pub ndef: uint,
    pub nuse: uint,
    pub bid: uint,
    pub cost: uint,
    pub slot: ::std::os::raw::c_int,
    pub cls: ::std::os::raw::c_short,
    pub hint: Tmp__bindgen_ty_1,
    pub phi: ::std::os::raw::c_int,
    pub alias: Alias,
    pub width: Tmp__bindgen_ty_2,
    pub visit: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tmp__bindgen_ty_1 {
    pub r: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub m: bits,
}
#[test]
fn bindgen_test_layout_Tmp__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Tmp__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Tmp__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(Tmp__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Tmp__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Tmp__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Tmp__bindgen_ty_1), "::", stringify!(r))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Tmp__bindgen_ty_1), "::", stringify!(w))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Tmp__bindgen_ty_1), "::", stringify!(m))
    );
}
pub const Tmp_WFull: Tmp__bindgen_ty_2 = 0;
pub const Tmp_Wsb: Tmp__bindgen_ty_2 = 1;
pub const Tmp_Wub: Tmp__bindgen_ty_2 = 2;
pub const Tmp_Wsh: Tmp__bindgen_ty_2 = 3;
pub const Tmp_Wuh: Tmp__bindgen_ty_2 = 4;
pub const Tmp_Wsw: Tmp__bindgen_ty_2 = 5;
pub const Tmp_Wuw: Tmp__bindgen_ty_2 = 6;
pub type Tmp__bindgen_ty_2 = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_Tmp() {
    const UNINIT: ::std::mem::MaybeUninit<Tmp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Tmp>(), 192usize, concat!("Size of: ", stringify!(Tmp)));
    assert_eq!(::std::mem::align_of::<Tmp>(), 8usize, concat!("Alignment of ", stringify!(Tmp)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(def))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(use_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ndef) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(ndef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nuse) as usize - ptr as usize },
        100usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(nuse))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bid) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(bid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cost) as usize - ptr as usize },
        108usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(cost))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        112usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(slot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cls) as usize - ptr as usize },
        116usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(cls))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hint) as usize - ptr as usize },
        120usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(hint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phi) as usize - ptr as usize },
        136usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(phi))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alias) as usize - ptr as usize },
        144usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(alias))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        184usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(width))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visit) as usize - ptr as usize },
        188usize,
        concat!("Offset of field: ", stringify!(Tmp), "::", stringify!(visit))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Con {
    pub type_: Con__bindgen_ty_1,
    pub sym: Sym,
    pub bits: Con__bindgen_ty_2,
    pub flt: ::std::os::raw::c_char,
}
pub const Con_CUndef: Con__bindgen_ty_1 = 0;
pub const Con_CBits: Con__bindgen_ty_1 = 1;
pub const Con_CAddr: Con__bindgen_ty_1 = 2;
pub type Con__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union Con__bindgen_ty_2 {
    pub i: i64,
    pub d: f64,
    pub s: f32,
}
#[test]
fn bindgen_test_layout_Con__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<Con__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Con__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(Con__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Con__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(Con__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Con__bindgen_ty_2), "::", stringify!(i))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Con__bindgen_ty_2), "::", stringify!(d))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Con__bindgen_ty_2), "::", stringify!(s))
    );
}
#[test]
fn bindgen_test_layout_Con() {
    const UNINIT: ::std::mem::MaybeUninit<Con> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Con>(), 32usize, concat!("Size of: ", stringify!(Con)));
    assert_eq!(::std::mem::align_of::<Con>(), 8usize, concat!("Alignment of ", stringify!(Con)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Con), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sym) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Con), "::", stringify!(sym))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(Con), "::", stringify!(bits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flt) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(Con), "::", stringify!(flt))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Addr {
    pub offset: Con,
    pub base: Ref,
    pub index: Ref,
    pub scale: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Addr() {
    const UNINIT: ::std::mem::MaybeUninit<Addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Addr>(), 48usize, concat!("Size of: ", stringify!(Addr)));
    assert_eq!(::std::mem::align_of::<Addr>(), 8usize, concat!("Alignment of ", stringify!(Addr)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Addr), "::", stringify!(offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(Addr), "::", stringify!(base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(Addr), "::", stringify!(index))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(Addr), "::", stringify!(scale))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Lnk {
    pub export: ::std::os::raw::c_char,
    pub thread: ::std::os::raw::c_char,
    pub align: ::std::os::raw::c_char,
    pub sec: *mut ::std::os::raw::c_char,
    pub secf: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Lnk() {
    const UNINIT: ::std::mem::MaybeUninit<Lnk> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Lnk>(), 24usize, concat!("Size of: ", stringify!(Lnk)));
    assert_eq!(::std::mem::align_of::<Lnk>(), 8usize, concat!("Alignment of ", stringify!(Lnk)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).export) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Lnk), "::", stringify!(export))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        1usize,
        concat!("Offset of field: ", stringify!(Lnk), "::", stringify!(thread))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(Lnk), "::", stringify!(align))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sec) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Lnk), "::", stringify!(sec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).secf) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(Lnk), "::", stringify!(secf))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fn {
    pub start: *mut Blk,
    pub tmp: *mut Tmp,
    pub con: *mut Con,
    pub mem: *mut Mem,
    pub ntmp: ::std::os::raw::c_int,
    pub ncon: ::std::os::raw::c_int,
    pub nmem: ::std::os::raw::c_int,
    pub nblk: uint,
    pub retty: ::std::os::raw::c_int,
    pub retr: Ref,
    pub rpo: *mut *mut Blk,
    pub reg: bits,
    pub slot: ::std::os::raw::c_int,
    pub vararg: ::std::os::raw::c_char,
    pub dynalloc: ::std::os::raw::c_char,
    pub name: [::std::os::raw::c_char; 80usize],
    pub lnk: Lnk,
}
#[test]
fn bindgen_test_layout_Fn() {
    const UNINIT: ::std::mem::MaybeUninit<Fn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Fn>(), 184usize, concat!("Size of: ", stringify!(Fn)));
    assert_eq!(::std::mem::align_of::<Fn>(), 8usize, concat!("Alignment of ", stringify!(Fn)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(start))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmp) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(tmp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).con) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(con))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(mem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ntmp) as usize - ptr as usize },
        32usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(ntmp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ncon) as usize - ptr as usize },
        36usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(ncon))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nmem) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(nmem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nblk) as usize - ptr as usize },
        44usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(nblk))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retty) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(retty))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retr) as usize - ptr as usize },
        52usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(retr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rpo) as usize - ptr as usize },
        56usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(rpo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot) as usize - ptr as usize },
        72usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(slot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vararg) as usize - ptr as usize },
        76usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(vararg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dynalloc) as usize - ptr as usize },
        77usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(dynalloc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        78usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnk) as usize - ptr as usize },
        160usize,
        concat!("Offset of field: ", stringify!(Fn), "::", stringify!(lnk))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Typ {
    pub name: [::std::os::raw::c_char; 80usize],
    pub isdark: ::std::os::raw::c_char,
    pub isunion: ::std::os::raw::c_char,
    pub align: ::std::os::raw::c_int,
    pub size: u64,
    pub nunion: uint,
    pub fields: *mut [Field; 33usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Field {
    pub type_: Field__bindgen_ty_1,
    pub len: uint,
}
pub const Field_FEnd: Field__bindgen_ty_1 = 0;
pub const Field_Fb: Field__bindgen_ty_1 = 1;
pub const Field_Fh: Field__bindgen_ty_1 = 2;
pub const Field_Fw: Field__bindgen_ty_1 = 3;
pub const Field_Fl: Field__bindgen_ty_1 = 4;
pub const Field_Fs: Field__bindgen_ty_1 = 5;
pub const Field_Fd: Field__bindgen_ty_1 = 6;
pub const Field_FPad: Field__bindgen_ty_1 = 7;
pub const Field_FTyp: Field__bindgen_ty_1 = 8;
pub type Field__bindgen_ty_1 = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_Field() {
    const UNINIT: ::std::mem::MaybeUninit<Field> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Field>(), 8usize, concat!("Size of: ", stringify!(Field)));
    assert_eq!(
        ::std::mem::align_of::<Field>(),
        4usize,
        concat!("Alignment of ", stringify!(Field))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Field), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Field), "::", stringify!(len))
    );
}
#[test]
fn bindgen_test_layout_Typ() {
    const UNINIT: ::std::mem::MaybeUninit<Typ> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Typ>(), 112usize, concat!("Size of: ", stringify!(Typ)));
    assert_eq!(::std::mem::align_of::<Typ>(), 8usize, concat!("Alignment of ", stringify!(Typ)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Typ), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isdark) as usize - ptr as usize },
        80usize,
        concat!("Offset of field: ", stringify!(Typ), "::", stringify!(isdark))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isunion) as usize - ptr as usize },
        81usize,
        concat!("Offset of field: ", stringify!(Typ), "::", stringify!(isunion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align) as usize - ptr as usize },
        84usize,
        concat!("Offset of field: ", stringify!(Typ), "::", stringify!(align))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        88usize,
        concat!("Offset of field: ", stringify!(Typ), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nunion) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(Typ), "::", stringify!(nunion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(Typ), "::", stringify!(fields))
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Dat {
    pub type_: Dat__bindgen_ty_1,
    pub name: *mut ::std::os::raw::c_char,
    pub lnk: *mut Lnk,
    pub u: Dat__bindgen_ty_2,
    pub isref: ::std::os::raw::c_char,
    pub isstr: ::std::os::raw::c_char,
}
pub const Dat_DStart: Dat__bindgen_ty_1 = 0;
pub const Dat_DEnd: Dat__bindgen_ty_1 = 1;
pub const Dat_DB: Dat__bindgen_ty_1 = 2;
pub const Dat_DH: Dat__bindgen_ty_1 = 3;
pub const Dat_DW: Dat__bindgen_ty_1 = 4;
pub const Dat_DL: Dat__bindgen_ty_1 = 5;
pub const Dat_DZ: Dat__bindgen_ty_1 = 6;
pub type Dat__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union Dat__bindgen_ty_2 {
    pub num: i64,
    pub fltd: f64,
    pub flts: f32,
    pub str_: *mut ::std::os::raw::c_char,
    pub ref_: Dat__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dat__bindgen_ty_2__bindgen_ty_1 {
    pub name: *mut ::std::os::raw::c_char,
    pub off: i64,
}
#[test]
fn bindgen_test_layout_Dat__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Dat__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Dat__bindgen_ty_2__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(Dat__bindgen_ty_2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Dat__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Dat__bindgen_ty_2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Dat__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Dat__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(off)
        )
    );
}
#[test]
fn bindgen_test_layout_Dat__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<Dat__bindgen_ty_2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Dat__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(Dat__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Dat__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(Dat__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Dat__bindgen_ty_2), "::", stringify!(num))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fltd) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Dat__bindgen_ty_2), "::", stringify!(fltd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flts) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Dat__bindgen_ty_2), "::", stringify!(flts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Dat__bindgen_ty_2), "::", stringify!(str_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Dat__bindgen_ty_2), "::", stringify!(ref_))
    );
}
#[test]
fn bindgen_test_layout_Dat() {
    const UNINIT: ::std::mem::MaybeUninit<Dat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(::std::mem::size_of::<Dat>(), 48usize, concat!("Size of: ", stringify!(Dat)));
    assert_eq!(::std::mem::align_of::<Dat>(), 8usize, concat!("Alignment of ", stringify!(Dat)));
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Dat), "::", stringify!(type_))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Dat), "::", stringify!(name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lnk) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(Dat), "::", stringify!(lnk))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        24usize,
        concat!("Offset of field: ", stringify!(Dat), "::", stringify!(u))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isref) as usize - ptr as usize },
        40usize,
        concat!("Offset of field: ", stringify!(Dat), "::", stringify!(isref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isstr) as usize - ptr as usize },
        41usize,
        concat!("Offset of field: ", stringify!(Dat), "::", stringify!(isstr))
    );
}
extern "C" {
    pub static mut T: Target;
}
extern "C" {
    pub static mut debug: [::std::os::raw::c_char; 91usize];
}
pub const Pool_PHeap: Pool = 0;
pub const Pool_PFn: Pool = 1;
pub type Pool = ::std::os::raw::c_uint;
extern "C" {
    pub static mut typ: *mut Typ;
}
extern "C" {
    pub static mut insb: [Ins; 1048576usize];
}
extern "C" {
    pub static mut curi: *mut Ins;
}
extern "C" {
    pub fn hash(arg1: *mut ::std::os::raw::c_char) -> u32;
}
extern "C" {
    pub fn die_(arg1: *mut ::std::os::raw::c_char, arg2: *mut ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    pub fn emalloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn freeall();
}
extern "C" {
    pub fn vnew(arg1: ulong, arg2: usize, arg3: Pool) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vfree(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vgrow(arg1: *mut ::std::os::raw::c_void, arg2: ulong);
}
extern "C" {
    pub fn strf(arg1: *mut ::std::os::raw::c_char, arg2: *mut ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn intern(arg1: *mut ::std::os::raw::c_char) -> u32;
}
extern "C" {
    #[link_name = "\u{1}str"]
    pub fn str_(arg1: u32) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn argcls(arg1: *mut Ins, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isreg(arg1: Ref) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscmp(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn emit(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: Ref,
        arg4: Ref,
        arg5: Ref,
    );
}
extern "C" {
    pub fn emiti(arg1: Ins);
}
extern "C" {
    pub fn idup(arg1: *mut *mut Ins, arg2: *mut Ins, arg3: ulong);
}
extern "C" {
    pub fn icpy(arg1: *mut Ins, arg2: *mut Ins, arg3: ulong) -> *mut Ins;
}
extern "C" {
    pub fn cmpop(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmpneg(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clsmerge(
        arg1: *mut ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn phicls(arg1: ::std::os::raw::c_int, arg2: *mut Tmp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtmp(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut Fn,
    ) -> Ref;
}
extern "C" {
    pub fn chuse(arg1: Ref, arg2: ::std::os::raw::c_int, arg3: *mut Fn);
}
extern "C" {
    pub fn symeq(arg1: Sym, arg2: Sym) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newcon(arg1: *mut Con, arg2: *mut Fn) -> Ref;
}
extern "C" {
    pub fn getcon(arg1: i64, arg2: *mut Fn) -> Ref;
}
extern "C" {
    pub fn addcon(arg1: *mut Con, arg2: *mut Con) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn salloc(arg1: Ref, arg2: Ref, arg3: *mut Fn);
}
extern "C" {
    pub fn dumpts(arg1: *mut BSet, arg2: *mut Tmp, arg3: *mut FILE);
}
extern "C" {
    pub fn bsinit(arg1: *mut BSet, arg2: uint);
}
extern "C" {
    pub fn bszero(arg1: *mut BSet);
}
extern "C" {
    pub fn bscount(arg1: *mut BSet) -> uint;
}
extern "C" {
    pub fn bsset(arg1: *mut BSet, arg2: uint);
}
extern "C" {
    pub fn bsclr(arg1: *mut BSet, arg2: uint);
}
extern "C" {
    pub fn bscopy(arg1: *mut BSet, arg2: *mut BSet);
}
extern "C" {
    pub fn bsunion(arg1: *mut BSet, arg2: *mut BSet);
}
extern "C" {
    pub fn bsinter(arg1: *mut BSet, arg2: *mut BSet);
}
extern "C" {
    pub fn bsdiff(arg1: *mut BSet, arg2: *mut BSet);
}
extern "C" {
    pub fn bsequal(arg1: *mut BSet, arg2: *mut BSet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsiter(arg1: *mut BSet, arg2: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optab: [Op; 138usize];
}
extern "C" {
    pub fn parse(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char)>,
        arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Dat)>,
        arg5: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Fn)>,
    );
}
extern "C" {
    pub fn printfn(arg1: *mut Fn, arg2: *mut FILE);
}
extern "C" {
    pub fn printref(arg1: Ref, arg2: *mut Fn, arg3: *mut FILE);
}
extern "C" {
    pub fn err(arg1: *mut ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    pub fn elimsb(arg1: *mut Fn);
}
extern "C" {
    pub fn newblk() -> *mut Blk;
}
extern "C" {
    pub fn edgedel(arg1: *mut Blk, arg2: *mut *mut Blk);
}
extern "C" {
    pub fn fillpreds(arg1: *mut Fn);
}
extern "C" {
    pub fn fillrpo(arg1: *mut Fn);
}
extern "C" {
    pub fn filldom(arg1: *mut Fn);
}
extern "C" {
    pub fn sdom(arg1: *mut Blk, arg2: *mut Blk) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dom(arg1: *mut Blk, arg2: *mut Blk) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fillfron(arg1: *mut Fn);
}
extern "C" {
    pub fn loopiter(
        arg1: *mut Fn,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut Blk, arg2: *mut Blk)>,
    );
}
extern "C" {
    pub fn fillloop(arg1: *mut Fn);
}
extern "C" {
    pub fn simpljmp(arg1: *mut Fn);
}
extern "C" {
    pub fn promote(arg1: *mut Fn);
}
extern "C" {
    pub fn coalesce(arg1: *mut Fn);
}
extern "C" {
    pub fn fillalias(arg1: *mut Fn);
}
extern "C" {
    pub fn getalias(arg1: *mut Alias, arg2: Ref, arg3: *mut Fn);
}
extern "C" {
    pub fn alias(
        arg1: Ref,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: Ref,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut Fn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn escapes(arg1: Ref, arg2: *mut Fn) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn loadsz(arg1: *mut Ins) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn storesz(arg1: *mut Ins) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn loadopt(arg1: *mut Fn);
}
extern "C" {
    pub fn filluse(arg1: *mut Fn);
}
extern "C" {
    pub fn ssa(arg1: *mut Fn);
}
extern "C" {
    pub fn ssacheck(arg1: *mut Fn);
}
extern "C" {
    pub fn copy(arg1: *mut Fn);
}
extern "C" {
    pub fn fold(arg1: *mut Fn);
}
extern "C" {
    pub fn simpl(arg1: *mut Fn);
}
extern "C" {
    pub fn liveon(arg1: *mut BSet, arg2: *mut Blk, arg3: *mut Blk);
}
extern "C" {
    pub fn filllive(arg1: *mut Fn);
}
extern "C" {
    pub fn fillcost(arg1: *mut Fn);
}
extern "C" {
    pub fn spill(arg1: *mut Fn);
}
extern "C" {
    pub fn rega(arg1: *mut Fn);
}
extern "C" {
    pub fn emitfnlnk(arg1: *mut ::std::os::raw::c_char, arg2: *mut Lnk, arg3: *mut FILE);
}
extern "C" {
    pub fn emitdat(arg1: *mut Dat, arg2: *mut FILE);
}
extern "C" {
    pub fn emitdbgfile(arg1: *mut ::std::os::raw::c_char, arg2: *mut FILE);
}
extern "C" {
    pub fn emitdbgloc(arg1: uint, arg2: *mut FILE);
}
extern "C" {
    pub fn stashbits(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn elf_emitfnfin(arg1: *mut ::std::os::raw::c_char, arg2: *mut FILE);
}
extern "C" {
    pub fn elf_emitfin(arg1: *mut FILE);
}
extern "C" {
    pub fn macho_emitfin(arg1: *mut FILE);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(gp_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(fp_offset))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(__va_list_tag), "::", stringify!(reg_save_area))
    );
}
